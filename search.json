[{"path":[]},{"path":"https://routr.data-imaginist.com/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://routr.data-imaginist.com/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://routr.data-imaginist.com/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://routr.data-imaginist.com/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://routr.data-imaginist.com/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://routr.data-imaginist.com/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://routr.data-imaginist.com/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://routr.data-imaginist.com/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://routr.data-imaginist.com/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://routr.data-imaginist.com/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://routr.data-imaginist.com/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://routr.data-imaginist.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thomas Lin Pedersen. Maintainer, author.","code":""},{"path":"https://routr.data-imaginist.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pedersen T (2025). routr: Simple Router HTTP WebSocket Requests. R package version 1.0.0.9000, https://routr.data-imaginist.com.","code":"@Manual{,   title = {routr: A Simple Router for HTTP and WebSocket Requests},   author = {Thomas Lin Pedersen},   year = {2025},   note = {R package version 1.0.0.9000},   url = {https://routr.data-imaginist.com}, }"},{"path":"https://routr.data-imaginist.com/index.html","id":"routr-","dir":"","previous_headings":"","what":"A Simple Router for HTTP and WebSocket Requests","title":"A Simple Router for HTTP and WebSocket Requests","text":"routr simple versatile router R based web servers. people familiar back-end development, router piece middleware delegates HTTP requests correct handler function. delegation based URL request essence means requests directed /persons/thomas/ ends another handler /packages/routr/. routr heavily inspired routers build platforms, especially Express.js Ruby Rails, though doesn’t mimick either.","code":""},{"path":"https://routr.data-imaginist.com/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Simple Router for HTTP and WebSocket Requests","text":"routr available CRAN can installed regular way. Alternatively can grab development version Github ","code":"install.packages('routr') # install.packages('devtools') devtools::install_github('thomasp85/routr')"},{"path":"https://routr.data-imaginist.com/index.html","id":"functionality","dir":"","previous_headings":"","what":"Functionality","title":"A Simple Router for HTTP and WebSocket Requests","text":"router build several seperate routes collected route stack. stack recieves request passes first route stack. Depending whether route can handle request whether handler signals fall-, request passed along stack handler signals processing done. means possible stack different functionality like user verification, static resource serving, etc. top .","code":""},{"path":"https://routr.data-imaginist.com/index.html","id":"the-handler","dir":"","previous_headings":"Functionality","what":"The handler","title":"A Simple Router for HTTP and WebSocket Requests","text":"handler function accepts arguments request, response, keys, .... handler must return boolean indicating request passed stack (TRUE) (FALSE). routr uses reqres package provide powerful request response classes makes easy work HTTP exchange. example simple handler : matter content request passed handler return “Hello World!” client. returns FALSE block handlers modify response.","code":"h <- function(request, response, keys, ...) {     response$status <- 200L     response$type <- 'html'     response$body <- '<h1>Hello World!<\/h1>'     return(FALSE) }"},{"path":"https://routr.data-imaginist.com/index.html","id":"the-route","dir":"","previous_headings":"Functionality","what":"The route","title":"A Simple Router for HTTP and WebSocket Requests","text":"route collection handlers. given request, one handler route called. route object R6 Route class can created : first argument add_handler defines request type second defines path handler responds . path need static. example :defines variable meaning handler respond /hello/<something>/ variation. variable value available handler keys argument. instance, request URL /hello/mars/ passed route, keys argument passed handler contain list(= 'mars'). Variables can span single level, meaning handler respond /hello/jupiter/saturn/. match anything use /hello/* responding sub-URL hello. Matches * end keys list. several paths route matches URL specific used, meaning /* match everything always chosen last. mind lets change handler respond variable: Let’s also add fallback handler captures everything:","code":"route <- Route$new() route$add_handler('get', '/hello/:what/', h) h <- function(request, response, keys, ...) {     response$status <- 200L     response$type <- 'html'     response$body <- paste0('<h1>Hello ', keys$what, '!<\/h1>')     return(FALSE) } route$add_handler('get', '/hello/:what/', h) hFallback <- function(request, response, keys, ...) {     response$status <- 200L     response$type <- 'html'     response$body <- '<h1>I\\'m not saying hello to you<\/h1>'     return(FALSE) } route$add_handler('get', '/*', hFallback)"},{"path":"https://routr.data-imaginist.com/index.html","id":"the-route-stack","dir":"","previous_headings":"Functionality","what":"The route stack","title":"A Simple Router for HTTP and WebSocket Requests","text":"route stack manages several routes takes care receiving request returning response. route stack object R6 class RouteStack created like : order routes added stack determines calling order, added first taking precedence added later. Request handled dispatch method like :","code":"router <- RouteStack$new() router$add_route(route, 'test') router$dispatch(request)"},{"path":"https://routr.data-imaginist.com/index.html","id":"use-with-fiery","dir":"","previous_headings":"Functionality","what":"Use with fiery","title":"A Simple Router for HTTP and WebSocket Requests","text":"RouteStack fiery-compliant plugin meaning can passed attach() method fiery server. set server pass requests route stack use resulting response automatically default router responds request events can also used dispatch header message events. latter case request send handlers modified version request used establish WebSocket version. used WebSocket router way extract path dispatch must provided part RouteStack construction.","code":"app <- fiery::Fire$new() app$attach(router) app$ignite(block = FALSE) # In Terminal (or visit in browser) # curl http://127.0.0.1:8080/hello/mars/ # <h1>Hello Mars!<\/h1> app$extinguish()"},{"path":"https://routr.data-imaginist.com/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"A Simple Router for HTTP and WebSocket Requests","text":"Please note ‘routr’ project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://routr.data-imaginist.com/reference/AssetRoute.html","id":null,"dir":"Reference","previous_headings":"","what":"Static file serving — AssetRoute","title":"Static file serving — AssetRoute","text":"class serving files server directly. AssetRoute fundamentally different routes provided routr. specific httpuv circumvents standard dispatch entirely (request never enters R process). makes extremely fast also somewhat limited pass request middleware.","code":""},{"path":"https://routr.data-imaginist.com/reference/AssetRoute.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Static file serving — AssetRoute","text":"url path serve assets path path file directory serve use_index index.html file served present client requests folder fallthrough requests match file enter request loop 404 response send directly html_charset charset report serving html files headers list headers add response. validation optional validation pattern compare request headers except One url paths excluded route name autogenerated name asset route","code":""},{"path":[]},{"path":"https://routr.data-imaginist.com/reference/AssetRoute.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Static file serving — AssetRoute","text":"AssetRoute$new() AssetRoute$print() AssetRoute$on_attach() AssetRoute$clone()","code":""},{"path":"https://routr.data-imaginist.com/reference/AssetRoute.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Static file serving — AssetRoute","text":"Create new AssetRoute","code":""},{"path":"https://routr.data-imaginist.com/reference/AssetRoute.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Static file serving — AssetRoute","text":"","code":"AssetRoute$new(   at,   path,   use_index = TRUE,   fallthrough = FALSE,   html_charset = \"utf-8\",   headers = list(),   validation = NULL,   except = NULL )"},{"path":"https://routr.data-imaginist.com/reference/AssetRoute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Static file serving — AssetRoute","text":"url path listen requests path path file directory file system use_index index.html file served present client requests folder fallthrough requests match file enter request loop 404 response send directly html_charset charset report serving html files headers list headers add response. combined global headers app validation string validating incoming requests. See httpuv::staticPath except One url paths excluded route. Requests matching enter standard router dispatch. paths interpreted subpaths , e.g. final path exclude +exclude","code":""},{"path":"https://routr.data-imaginist.com/reference/AssetRoute.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Static file serving — AssetRoute","text":"Pretty printing object","code":""},{"path":"https://routr.data-imaginist.com/reference/AssetRoute.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Static file serving — AssetRoute","text":"","code":"AssetRoute$print(...)"},{"path":"https://routr.data-imaginist.com/reference/AssetRoute.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Static file serving — AssetRoute","text":"... Ignored","code":""},{"path":"https://routr.data-imaginist.com/reference/AssetRoute.html","id":"method-on-attach-","dir":"Reference","previous_headings":"","what":"Method on_attach()","title":"Static file serving — AssetRoute","text":"Method use fiery attached plugin. called directly. method creates RouteStack asset route single route mounts app. flexibility create RouteStack manually","code":""},{"path":"https://routr.data-imaginist.com/reference/AssetRoute.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Static file serving — AssetRoute","text":"","code":"AssetRoute$on_attach(app, on_error = NULL, ...)"},{"path":"https://routr.data-imaginist.com/reference/AssetRoute.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Static file serving — AssetRoute","text":"app Fire object attach router on_error function error handling ... Ignored","code":""},{"path":"https://routr.data-imaginist.com/reference/AssetRoute.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Static file serving — AssetRoute","text":"objects class cloneable method.","code":""},{"path":"https://routr.data-imaginist.com/reference/AssetRoute.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Static file serving — AssetRoute","text":"","code":"AssetRoute$clone(deep = FALSE)"},{"path":"https://routr.data-imaginist.com/reference/AssetRoute.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Static file serving — AssetRoute","text":"deep Whether make deep clone.","code":""},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Single route dispatch — Route","title":"Single route dispatch — Route","text":"Class handling single route dispatch","code":""},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Single route dispatch — Route","text":"Route class used encapsulate single URL dispatch, , chose single handler range based URL path. handler called request, response, keys argument well additional arguments passed dispatch(). path strip query string prior assignment handler, can contain wildcards, can parameterised using : prefix. multiple matches request path specific chosen. Specificity based number elements (), number parameters (least), number wildcards (least), order. Parameter values available keys argument passed handler, e.g. path /user/:user_id provide list(user_id = 123) dispatch /user/123 keys argument. Handlers called side-effects expected return either TRUE FALSE indicating whether additional routes RouteStack called, e.g. handler returning FALSE processing request terminated response passed along current state. Thus, intend handlers modify request response objects, place. calls handlers wrapped try() exception raised response code set 500 body response error message. processing request terminated. different error handling scheme wanted must implemented within handler (standard approach chosen avoid handler errors resulting server crash). handler referencing specific HTTP method (get, post, etc.) can also reference indicate match types requests. Handlers referencing lower precedence referencing specific methods, called match found within handlers specific method.","code":""},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"initialization","dir":"Reference","previous_headings":"","what":"Initialization","title":"Single route dispatch — Route","text":"new 'Route'-object initialized using new() method generator alternatively using route(): Usage","code":""},{"path":[]},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Single route dispatch — Route","text":"root root route. removed path request matching handler name autogenerated name route empty route empty","code":""},{"path":[]},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Single route dispatch — Route","text":"Route$new() Route$print() Route$add_handler() Route$remove_handler() Route$get_handler() Route$remap_handlers() Route$merge_route() Route$dispatch() Route$on_attach() Route$clone()","code":""},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Single route dispatch — Route","text":"Create new Route","code":""},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single route dispatch — Route","text":"","code":"Route$new(..., ignore_trailing_slash = FALSE)"},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single route dispatch — Route","text":"... Handlers add front. Must form named lists names corresponds paths elements handlers. name argument defines method listen (see examples) ignore_trailing_slash Logical. trailing slash path ignored adding handlers handling requests. Setting change request path associated just ensure path//resource path//resource/ ends handler. request left untouched, setting TRUE affect processing routes","code":""},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Single route dispatch — Route","text":"Pretty printing object","code":""},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Single route dispatch — Route","text":"","code":"Route$print(...)"},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single route dispatch — Route","text":"... Ignored","code":""},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"method-add-handler-","dir":"Reference","previous_headings":"","what":"Method add_handler()","title":"Single route dispatch — Route","text":"Add handler specified method path. special method '' allow handler match http request methods. path URL path consisting strings, parameters (strings prefixed :), wildcards (*), separated /. wildcard match anything thus restricted single path element (.e. span multiple / possible). handler must function containing arguments request, response, keys, ..., must return either TRUE FALSE. request argument reqres::Request object response argument reqres::Response object matching current exchange. keys argument named list value matched parameters path. additional argument passed dispatch method avaiable well. method override existing handler method path.","code":""},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Single route dispatch — Route","text":"","code":"Route$add_handler(method, path, handler, reject_missing_methods = FALSE)"},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single route dispatch — Route","text":"method http method match handler path URL path match handler handler function reject_missing_methods requests path handler specific method automatically rejected 405 Method Allowed response correct Allow header informing client implemented methods. Assigning handler \"\" path later point overwrite functionality. aware setting TRUE prevent request falling routes might matching method path.","code":""},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"method-remove-handler-","dir":"Reference","previous_headings":"","what":"Method remove_handler()","title":"Single route dispatch — Route","text":"Removes handler assigned specified method path. handler assigned silently ignore .","code":""},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Single route dispatch — Route","text":"","code":"Route$remove_handler(method, path)"},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single route dispatch — Route","text":"method http method handler remove path URL path handler remove","code":""},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"method-get-handler-","dir":"Reference","previous_headings":"","what":"Method get_handler()","title":"Single route dispatch — Route","text":"Returns handler already assigned specified method path. handler assigned return NULL.","code":""},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Single route dispatch — Route","text":"","code":"Route$get_handler(method, path)"},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single route dispatch — Route","text":"method http method handler find path URL path handler find","code":""},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"method-remap-handlers-","dir":"Reference","previous_headings":"","what":"Method remap_handlers()","title":"Single route dispatch — Route","text":"Allows loop added handlers reassings . function parameters method, path, handler must provided responsible reassigning handler given arguments. function reassign handler, handler removed.","code":""},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Single route dispatch — Route","text":"","code":"Route$remap_handlers(.f)"},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single route dispatch — Route","text":".f function performing remapping handler","code":""},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"method-merge-route-","dir":"Reference","previous_headings":"","what":"Method merge_route()","title":"Single route dispatch — Route","text":"Merge another route one, adopting handlers. route empty merge.","code":""},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Single route dispatch — Route","text":"","code":"Route$merge_route(route, use_root = TRUE)"},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single route dispatch — Route","text":"route Route object use_root root route prepended paths route adding ","code":""},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"method-dispatch-","dir":"Reference","previous_headings":"","what":"Method dispatch()","title":"Single route dispatch — Route","text":"Based reqres::Request object route find correct handler call correct arguments. Anything passed ... passed along handler.","code":""},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Single route dispatch — Route","text":"","code":"Route$dispatch(request, ...)"},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single route dispatch — Route","text":"request request route ... Additional arguments handlers","code":""},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"method-on-attach-","dir":"Reference","previous_headings":"","what":"Method on_attach()","title":"Single route dispatch — Route","text":"Method use fiery attached plugin. called directly. method creates RouteStack route single route mounts app. flexibility create RouteStack manually","code":""},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Single route dispatch — Route","text":"","code":"Route$on_attach(app, on_error = NULL, ...)"},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single route dispatch — Route","text":"app Fire object attach router on_error function error handling ... Ignored","code":""},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Single route dispatch — Route","text":"objects class cloneable method.","code":""},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Single route dispatch — Route","text":"","code":"Route$clone(deep = FALSE)"},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single route dispatch — Route","text":"deep Whether make deep clone.","code":""},{"path":"https://routr.data-imaginist.com/reference/Route-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Single route dispatch — Route","text":"","code":"# Initialise an empty route route <- Route$new()  # Initialise a route with handlers assigned route <- Route$new(   all = list(     '/*' = function(request, response, keys, ...) {       message('Request received')       TRUE     }   ) )  # Remove it again route$remove_handler('all', '/*')"},{"path":"https://routr.data-imaginist.com/reference/Route.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a new route — route","title":"Construct a new route — route","text":"function constructs new Route, optionally set handlers already attached.","code":""},{"path":"https://routr.data-imaginist.com/reference/Route.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a new route — route","text":"","code":"route(..., root = \"\")"},{"path":"https://routr.data-imaginist.com/reference/Route.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a new route — route","text":"... Handlers add front. Must form named lists names corresponds paths elements handlers. name argument defines method listen (see examples) root root route. removed path request matching handler","code":""},{"path":"https://routr.data-imaginist.com/reference/Route.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a new route — route","text":"Route object","code":""},{"path":"https://routr.data-imaginist.com/reference/Route.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a new route — route","text":"","code":"# An empty route route <- route() route #> A route with 0 handlers  # Prepopulating it at construction route <- route(all = list(   '/*' = function(request, response, keys, ...) {     message('Request received')     TRUE   } )) route #> A route with 1 handler #> all: #> • /*"},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine multiple routes for sequential routing — RouteStack","title":"Combine multiple routes for sequential routing — RouteStack","text":"Combine multiple routes sequential routing Combine multiple routes sequential routing","code":""},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine multiple routes for sequential routing — RouteStack","text":"RouteStack class encapsulate multiple Routes lets request passed sequentially. route returning FALSE upon dispatch dispatching cancelled.","code":""},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"initialization","dir":"Reference","previous_headings":"","what":"Initialization","title":"Combine multiple routes for sequential routing — RouteStack","text":"new 'RouteStack'-object initialized using new() method generator: Usage","code":""},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"fiery-plugin","dir":"Reference","previous_headings":"","what":"Fiery plugin","title":"Combine multiple routes for sequential routing — RouteStack","text":"RouteStack object valid fiery plugin can thus passed attach() method Fire object. used fiery plugin important concious event attached . default attached request event thus used handle HTTP request messaging. alternative attach header event fired headers received body . allows short-circuit request handling e.g. reject requests certain size. router attached header event handler returning FALSE signal handling request stopped response current form returned without fetching request body. One last possibility attach message event thus use handle WebSocket messages. use case bit different request header. routr uses Request objects vessel routes WebSocket messages HTTP requests, modification needed. way routr achieves modifying HTTP request established WebSocket connection send routes. Using path_extractor function provided RouteStack constructor extract path dispatch assign request. Furthermore assigns message body request sets Content-Type header based whether message binary application/octet-stream text/plain. WebSocket communication asynchronous response ignored attached message event. communication send back, use server$send() inside handler(s). RouteStack attached defined attach_to field must either 'request', 'header', 'message'. attaching RouteStack possible modify errors handled, using on_error argument, change error handler set RouteStack. default error handler changed using fiery logging system Fire object supports .","code":""},{"path":[]},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Combine multiple routes for sequential routing — RouteStack","text":"attach_to event routr respond name autogenerated name route stack routes Gices name routes stack empty route stack empty","code":""},{"path":[]},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Combine multiple routes for sequential routing — RouteStack","text":"RouteStack$new() RouteStack$print() RouteStack$add_route() RouteStack$add_redirect() RouteStack$get_route() RouteStack$has_route() RouteStack$remove_route() RouteStack$dispatch() RouteStack$on_attach() RouteStack$merge_stack() RouteStack$clone()","code":""},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Combine multiple routes for sequential routing — RouteStack","text":"Create new RouteStack","code":""},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine multiple routes for sequential routing — RouteStack","text":"","code":"RouteStack$new(..., path_extractor = function(msg, bin) \"/\")"},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine multiple routes for sequential routing — RouteStack","text":"... Routes add front. Must form named arguments containing Route objects. path_extractor function returns path dispatch WebSocket message. used attach_to == 'message'. Defaults function returning '/'","code":""},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Combine multiple routes for sequential routing — RouteStack","text":"Pretty printing object","code":""},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine multiple routes for sequential routing — RouteStack","text":"","code":"RouteStack$print(...)"},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine multiple routes for sequential routing — RouteStack","text":"... Ignored","code":""},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"method-add-route-","dir":"Reference","previous_headings":"","what":"Method add_route()","title":"Combine multiple routes for sequential routing — RouteStack","text":"Adds new route stack. route must Route object, name must string. given route inserted given index, (NULL) inserted end stack.","code":""},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine multiple routes for sequential routing — RouteStack","text":"","code":"RouteStack$add_route(route, name, after = NULL)"},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine multiple routes for sequential routing — RouteStack","text":"route Route object name name route location stack put route","code":""},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"method-add-redirect-","dir":"Reference","previous_headings":"","what":"Method add_redirect()","title":"Combine multiple routes for sequential routing — RouteStack","text":"Adds permanent (308) temporary (307) redirect path another. paths can contain path arguments wildcards, present must also present (reverse required)","code":""},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine multiple routes for sequential routing — RouteStack","text":"","code":"RouteStack$add_redirect(method, from, to, permanent = TRUE)"},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine multiple routes for sequential routing — RouteStack","text":"method http method match handler path redirect respond path redirect signal client new path permanent Logical. TRUE 308 Permanent Redirect send back, instructing client update URL browser show new path well avoid sending requests old URL . FALSE 307 Temporary Redirect send back, instructing client proceed response comes old path","code":""},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"method-get-route-","dir":"Reference","previous_headings":"","what":"Method get_route()","title":"Combine multiple routes for sequential routing — RouteStack","text":"Get route given name","code":""},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine multiple routes for sequential routing — RouteStack","text":"","code":"RouteStack$get_route(name)"},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine multiple routes for sequential routing — RouteStack","text":"name name route retrieve","code":""},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"method-has-route-","dir":"Reference","previous_headings":"","what":"Method has_route()","title":"Combine multiple routes for sequential routing — RouteStack","text":"Test routestack contains route given name.","code":""},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine multiple routes for sequential routing — RouteStack","text":"","code":"RouteStack$has_route(name)"},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine multiple routes for sequential routing — RouteStack","text":"name name route look ","code":""},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"method-remove-route-","dir":"Reference","previous_headings":"","what":"Method remove_route()","title":"Combine multiple routes for sequential routing — RouteStack","text":"Removes route given name stack.","code":""},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine multiple routes for sequential routing — RouteStack","text":"","code":"RouteStack$remove_route(name)"},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine multiple routes for sequential routing — RouteStack","text":"name name route remove","code":""},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"method-dispatch-","dir":"Reference","previous_headings":"","what":"Method dispatch()","title":"Combine multiple routes for sequential routing — RouteStack","text":"asses reqres::Request stack routes sequence one routes return FALSE every route passed . ... passed dispatch Route stack.","code":""},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine multiple routes for sequential routing — RouteStack","text":"","code":"RouteStack$dispatch(request, ...)"},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine multiple routes for sequential routing — RouteStack","text":"request request route ... Additional arguments pass handlers","code":""},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"method-on-attach-","dir":"Reference","previous_headings":"","what":"Method on_attach()","title":"Combine multiple routes for sequential routing — RouteStack","text":"Method use fiery attached plugin. called directly.","code":""},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine multiple routes for sequential routing — RouteStack","text":"","code":"RouteStack$on_attach(app, on_error = deprecated(), ...)"},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine multiple routes for sequential routing — RouteStack","text":"app Fire object attach router on_error function error handling ... Ignored","code":""},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"method-merge-stack-","dir":"Reference","previous_headings":"","what":"Method merge_stack()","title":"Combine multiple routes for sequential routing — RouteStack","text":"Merge two route stacks together adding routes route . route stack empty .","code":""},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine multiple routes for sequential routing — RouteStack","text":"","code":"RouteStack$merge_stack(stack)"},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine multiple routes for sequential routing — RouteStack","text":"stack Another RouteStack object merge one","code":""},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Combine multiple routes for sequential routing — RouteStack","text":"objects class cloneable method.","code":""},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine multiple routes for sequential routing — RouteStack","text":"","code":"RouteStack$clone(deep = FALSE)"},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine multiple routes for sequential routing — RouteStack","text":"deep Whether make deep clone.","code":""},{"path":"https://routr.data-imaginist.com/reference/RouteStack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine multiple routes for sequential routing — RouteStack","text":"","code":"# Create a new stack routes <- RouteStack$new()  # Populate it wih routes first <- Route$new() first$add_handler('all', '*', function(request, response, keys, ...) {   message('This will always get called first')   TRUE }) second <- Route$new() second$add_handler('get', '/demo/', function(request, response, keys, ...) {   message('This will get called next if the request asks for /demo/')   TRUE }) routes$add_route(first, 'first') routes$add_route(second, 'second')  # Send a request through rook <- fiery::fake_request('http://example.com/demo/', method = 'get') req <- reqres::Request$new(rook) routes$dispatch(req) #> This will always get called first #> This will get called next if the request asks for /demo/ #> [1] TRUE"},{"path":"https://routr.data-imaginist.com/reference/asset_route.html","id":null,"dir":"Reference","previous_headings":"","what":"High performance route for serving static files — asset_route","title":"High performance route for serving static files — asset_route","text":"asset_route() fundamentally different routes provided routr. Conceptually akin resource_route() used serving static file content, route circumvents standard dispatch entirely (request never enters R process). makes extremely fast also somewhat limited pass request middleware. choice asset_route() resource_route() thus depends needs.","code":""},{"path":"https://routr.data-imaginist.com/reference/asset_route.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"High performance route for serving static files — asset_route","text":"","code":"asset_route(   at,   path,   use_index = TRUE,   fallthrough = FALSE,   html_charset = \"utf-8\",   headers = list(),   validation = NULL,   except = NULL )"},{"path":"https://routr.data-imaginist.com/reference/asset_route.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"High performance route for serving static files — asset_route","text":"url path listen requests path path file directory file system use_index index.html file served present client requests folder fallthrough requests match file enter request loop 404 response send directly html_charset charset report serving html files headers list headers add response. combined global headers app validation optional validation pattern. Presently, type validation supported exact string match header. example, validation '\"abc\" = \"xyz\"', HTTP requests must header named abc (case-insensitive) value xyz (case-sensitive). request matching header, httpuv give 403 Forbidden response. character(0) (default), validation check performed. except One url paths excluded route. Requests matching enter standard router dispatch. paths interpreted subpaths , e.g. final path exclude +exclude (see example)","code":""},{"path":"https://routr.data-imaginist.com/reference/asset_route.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"High performance route for serving static files — asset_route","text":"AssetRoute object","code":""},{"path":[]},{"path":"https://routr.data-imaginist.com/reference/asset_route.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"High performance route for serving static files — asset_route","text":"","code":"asset_route(\"/wd\", \"./\", except = \"/private\") #> A route mapping files from ./ to /wd excluding /wd/private #>  #> ── Settings:  #> use_index: TRUE #> fallthrough: FALSE #> html_charset: utf-8 #> headers: <none> #> validation: <none>"},{"path":"https://routr.data-imaginist.com/reference/openapi_route.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a route for serving OpenAPI documentation of your server — openapi_route","title":"Create a route for serving OpenAPI documentation of your server — openapi_route","text":"route facilitates serving OpenAPI specs server, using either RapiDoc, Redoc Swagger UI . function help describe API - provide description .","code":""},{"path":"https://routr.data-imaginist.com/reference/openapi_route.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a route for serving OpenAPI documentation of your server — openapi_route","text":"","code":"openapi_route(   spec,   root = \"__docs__\",   ui = c(\"rapidoc\", \"redoc\", \"swagger\"),   ... )"},{"path":"https://routr.data-imaginist.com/reference/openapi_route.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a route for serving OpenAPI documentation of your server — openapi_route","text":"spec path json yaml file describing OpenAPI spec root point want serve UI ui Either \"rapidoc\", \"redoc\" \"swagger\", setting UI use ... arguments passed ui functions (e.g. rapidoc::rapidoc_spec())","code":""},{"path":"https://routr.data-imaginist.com/reference/openapi_route.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a route for serving OpenAPI documentation of your server — openapi_route","text":"Route object","code":""},{"path":[]},{"path":"https://routr.data-imaginist.com/reference/register_report_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a new report format — register_report_format","title":"Register a new report format — register_report_format","text":"report_route() depends formats specified yaml header determine mime types supported Content-Type request header. routr comes long list well known formats case format unknown, can register correct mime type file extension can deduced.","code":""},{"path":"https://routr.data-imaginist.com/reference/register_report_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a new report format — register_report_format","text":"","code":"register_report_format(format, mime_type, extension = NULL, force = FALSE)  show_report_formats()"},{"path":"https://routr.data-imaginist.com/reference/register_report_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a new report format — register_report_format","text":"format name report format mime_type mime type output produces extension file extension output . NULL deduced mime type force already existing formats overwritten.","code":""},{"path":"https://routr.data-imaginist.com/reference/register_report_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register a new report format — register_report_format","text":"register_report_format() called side effect. show_report_formats() returns data frame.","code":""},{"path":"https://routr.data-imaginist.com/reference/report_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the mime types of the possible outputs for a report — report_info","title":"Get the mime types of the possible outputs for a report — report_info","text":"Get mime types possible outputs report","code":""},{"path":"https://routr.data-imaginist.com/reference/report_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the mime types of the possible outputs for a report — report_info","text":"","code":"report_info(file)"},{"path":"https://routr.data-imaginist.com/reference/report_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the mime types of the possible outputs for a report — report_info","text":"file path report","code":""},{"path":"https://routr.data-imaginist.com/reference/report_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the mime types of the possible outputs for a report — report_info","text":"list formats, mime types, file extensions output, acceptable parameters (named list names corresponding parameter name value corresponding default value), title document. quarto documents default values parameters omitted.","code":""},{"path":"https://routr.data-imaginist.com/reference/report_route.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a route that renders and serves an Rmarkdown or Quarto report — report_route","title":"Create a route that renders and serves an Rmarkdown or Quarto report — report_route","text":"route allows serve report written Quarto/Rmarkdown document. report rendered demand using query params parameters report match, providing body POST request. Depending value value max_age rendered report kept served without re-render subsequent requests. rendering can happen asynchronously case promise returned.","code":""},{"path":"https://routr.data-imaginist.com/reference/report_route.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a route that renders and serves an Rmarkdown or Quarto report — report_route","text":"","code":"report_route(   path,   file,   ...,   max_age = Inf,   async = TRUE,   finalize = NULL,   continue = FALSE,   ignore_trailing_slash = FALSE,   cache_dir = tempfile(pattern = \"routr_report\"),   cache_by_id = FALSE,   param_caster = identity )"},{"path":"https://routr.data-imaginist.com/reference/report_route.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a route that renders and serves an Rmarkdown or Quarto report — report_route","text":"path url path serve report file quarto rmarkdown file use rendering report ... arguments quarto::quarto_render() rmarkdown::render() max_age maximum age seconds keep rendered report initiating re-render async rendering happen asynchronously (using mirai) finalize optional function run sending response back. function receive request first argument, response second, server third. continue logical defines whether response returned directly rendering made available subsequent routes ignore_trailing_slash path taken exactly version without terminating slash accepted cache_dir location render cache. default temporary folder created . cache_by_id caching scoped user id. rendering dependent user-level access different data necessary avoid data leakage. param_caster optional function convert query/body parameters expected type, list elements query body holding function convert respective parts expected type.","code":""},{"path":"https://routr.data-imaginist.com/reference/report_route.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a route that renders and serves an Rmarkdown or Quarto report — report_route","text":"route object","code":""},{"path":"https://routr.data-imaginist.com/reference/report_route.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a route that renders and serves an Rmarkdown or Quarto report — report_route","text":"formats explicitely stated header report allowed can selected multiple ways. Either appending name format subpath path (e.g. /report/revealjs), appending extension output type path (e.g. /report.pdf), standard content negotiation using Content-Type header request. latter two, possible select first format kind mime-type/extension.","code":""},{"path":"https://routr.data-imaginist.com/reference/resource_route.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a route for fetching files — resource_route","title":"Create a route for fetching files — resource_route","text":"function creates route mapping different paths files server filesystem. Different subpaths can mapped different locations server e.g. /data/ maps /path//data/ /assets/ maps //completely/different/path/. route support automatic expansion paths default extension file, using compressed versions files request permits , setting correct headers results cached.","code":""},{"path":"https://routr.data-imaginist.com/reference/resource_route.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a route for fetching files — resource_route","text":"","code":"resource_route(   ...,   default_file = \"index.html\",   default_ext = \"html\",   finalize = NULL,   continue = FALSE )"},{"path":"https://routr.data-imaginist.com/reference/resource_route.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a route for fetching files — resource_route","text":"... Named arguments mapping subpath URL location file system. mappings checked sequence default_file default file look path map file directly (see Details) default_ext default file extension add file file found provided path path extension (see Details) finalize optional function run file found. function receive request first argument, response second, anything passed ... dispatch method. return value function discarded. function must accept ... continue logical returned file found. Defaults FALSE indicating response send unmodified.","code":""},{"path":"https://routr.data-imaginist.com/reference/resource_route.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a route for fetching files — resource_route","text":"Route object","code":""},{"path":"https://routr.data-imaginist.com/reference/resource_route.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a route for fetching files — resource_route","text":"way paths resolved file , every mounted location, Check path contains mount point. , continue next mount point substitute mount point local location path path ends / add default_file (defaults index.html) see file exists along compressed versions (versions .gz, .zip, .br, .zz appended) version exists, chose prefered encoding based Accept-Encoding header request, return. none exists path specify file extension, add default_ext path repeat 3-4 none exists still path specify file extension, add default_file path repeat 3-4 none exists still, continue next mount point means path /data/mtcars, following locations tested (assuming /data/ -> /path//data/ mapping): /path//data/mtcars, /path//data/mtcars.gz, /path//data/mtcars.zip, /path//data/mtcars.br, /path//data/mtcars.zz /path//data/mtcars.html, /path//data/mtcars.html.gz, /path//data/mtcars.html.zip, /path//data/mtcars.html.br, /path//data/mtcars.html.zz /path//data/mtcars/index.html, /path//data/mtcars/index.html.gz, /path//data/mtcars/index.html.zip, /path//data/mtcars/index.html.br, /path//data/mtcars/index.html.zz Assuming default values default_file default_ext file found, route simply return TRUE hand control subsequent routes stack, otherwise return logical value continue argument (defaults FALSE, thus shortcutting additional routes stack). file found request headers -Modified-Since -None-Match, fetched , exist, used determine whether 304 - Modified response send instead file. file send, added response along following headers: Content-Type based extension file (without encoding extensions) Content-Encoding based negotiated file encoding ETag based rlang::hash() last modified date Cache-Control set max-age=3600 Furthermore Content-Length set automatically httpuv Lastly, found, finalize function called, forwarding request, response ... dispatch method.","code":""},{"path":[]},{"path":"https://routr.data-imaginist.com/reference/resource_route.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a route for fetching files — resource_route","text":"","code":"# Map package files res_route <- resource_route(   '/package_files/' = system.file(package = 'routr') )  rook <- fiery::fake_request('http://example.com/package_files/DESCRIPTION') req <- reqres::Request$new(rook) res_route$dispatch(req) #> [1] FALSE req$response$as_list() #> $status #> [1] 200 #>  #> $headers #> $headers$`content-type` #> [1] \"text/plain\" #>  #> $headers$`content-encoding` #> [1] \"identity\" #>  #> $headers$etag #> [1] \"99bad1b9dc44d776306ebda09b114136\" #>  #> $headers$`cache-control` #> [1] \"max-age=3600\" #>  #> $headers$`last-modified` #> [1] \"Tue, 07 Oct 2025 06:52:20 GMT\" #>  #> $headers$`content-location` #> [1] \"/package_files/DESCRIPTION\" #>  #> $headers$date #> [1] \"Tue, 07 Oct 2025 06:52:38 GMT\" #>  #>  #> $body #>                                                file  #> \"/home/runner/work/_temp/Library/routr/DESCRIPTION\"  #>"},{"path":"https://routr.data-imaginist.com/reference/ressource_route.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions — ressource_route","title":"Deprecated functions — ressource_route","text":"Deprecated functions","code":""},{"path":"https://routr.data-imaginist.com/reference/ressource_route.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions — ressource_route","text":"","code":"ressource_route(...)"},{"path":"https://routr.data-imaginist.com/reference/route_add.html","id":null,"dir":"Reference","previous_headings":"","what":"Route handlers — route_add","title":"Route handlers — route_add","text":"functions helps add, remove, retrieve route handlers. (except route_get()) returns route easy chaining.","code":""},{"path":"https://routr.data-imaginist.com/reference/route_add.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Route handlers — route_add","text":"","code":"route_add(x, method, path, handler)  route_remove(x, method, path)  route_get(x, method, path)"},{"path":"https://routr.data-imaginist.com/reference/route_add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Route handlers — route_add","text":"x Route object method request method handler. special method \"\" allow handler match http request methods comes . path URL path handler. See Paths path semantics handler handler function. See Handlers semantics handlers","code":""},{"path":"https://routr.data-imaginist.com/reference/route_add.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Route handlers — route_add","text":"x, modified. route_get() returns requested handler","code":""},{"path":"https://routr.data-imaginist.com/reference/route_add.html","id":"paths","dir":"Reference","previous_headings":"","what":"Paths","title":"Route handlers — route_add","text":"path URL path consisting strings, parameters (strings prefixed :), wildcards (*), separated /. wildcard match anything thus restricted single path element (.e. span multiple / possible). serving request single handler selected based path match specific. Specificity based number path parts (ie. number elements separated /), better; number wildcards, fewer better; number keys, fewer better. printing route can see priority paths route sorted ","code":""},{"path":"https://routr.data-imaginist.com/reference/route_add.html","id":"handlers","dir":"Reference","previous_headings":"","what":"Handlers","title":"Route handlers — route_add","text":"handler function. least ... argument must return eiter TRUE FALSE. Returning TRUE means request allowed continue processing can passed next route stack. Returning FALSE stops processing request stack. arguments besides ... optional, get passed named: request hold request reqres::Request object response hold request reqres::Response object keys named list containing values matched path keys (see example) , routr used fiery plugin, handler receive: server fiery::Fire object defining app id id client sending request, provided fiery arg_list list values calculated servers -request event handlers can ignored handler, accepting server often paramount powerful features delayed execution logging.","code":""},{"path":"https://routr.data-imaginist.com/reference/route_add.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Route handlers — route_add","text":"","code":"# Add a handler route <- route() |>   route_add(\"get\", \"/:what\", function(request, response, keys, ...) {     message(\"Requesting\", keys$what)     TRUE   }) route #> A route with 1 handler #> get: #> • /:what  # Retrieve the handler route |> route_get(\"get\", \"/:what\") #> A route with 1 handler #> get: #> • /:what  # Remove the handler route |> route_remove(\"get\", \"/:what\") #> A route with 0 handlers"},{"path":"https://routr.data-imaginist.com/reference/route_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge one route into another — route_merge","title":"Merge one route into another — route_merge","text":"function allows combine two separate routes one. different combining routestack, request matched one handler route (thus combining route_merge() ensure one handler called).","code":""},{"path":"https://routr.data-imaginist.com/reference/route_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge one route into another — route_merge","text":"","code":"route_merge(x, route, use_root = TRUE)"},{"path":"https://routr.data-imaginist.com/reference/route_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge one route into another — route_merge","text":"x, route Route objects merge. route merged x use_root root route added paths merged x","code":""},{"path":"https://routr.data-imaginist.com/reference/route_merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge one route into another — route_merge","text":"x route merged ","code":""},{"path":"https://routr.data-imaginist.com/reference/route_merge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge one route into another — route_merge","text":"","code":"route() |>   route_add(\"HEAD\", \"*\", function(...) {     message(\"Someone's looking\")     TRUE   }) |>   route_merge(     sizelimit_route()   ) #> A route with 2 handlers #> head: #> • * #> all: #> • *"},{"path":"https://routr.data-imaginist.com/reference/route_stack.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine routes in a stack — route_stack","title":"Combine routes in a stack — route_stack","text":"function allows combine multiple routes stack order dispatch one returns FALSE. allows router can pass request multiple handlers sending along client middleware","code":""},{"path":"https://routr.data-imaginist.com/reference/route_stack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine routes in a stack — route_stack","text":"","code":"route_stack(x, ...)  # Default S3 method route_stack(x, ...)  # S3 method for class 'Route' route_stack(x, ...)  # S3 method for class 'AssetRoute' route_stack(x, ...)  # S3 method for class 'RouteStack' route_stack(x, ..., .after = NULL)"},{"path":"https://routr.data-imaginist.com/reference/route_stack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine routes in a stack — route_stack","text":"x Route RouteStack object ... one named Route objects .stack new routes placed. NULL means place end.","code":""},{"path":"https://routr.data-imaginist.com/reference/route_stack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine routes in a stack — route_stack","text":"RouteStack object. x RouteStack returned, modified.","code":""},{"path":"https://routr.data-imaginist.com/reference/route_stack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine routes in a stack — route_stack","text":"","code":"# Create an empty route stack route_stack() #> A RouteStack containing 0 routes  # Stack a route with another, returning a RouteStack route(all = list(\"*\" = function(...) TRUE)) |>   route_stack(     limit = sizelimit_route()   ) #> A RouteStack containing 2 routes #> 1. x #> 2. limit"},{"path":"https://routr.data-imaginist.com/reference/routr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"routr: A Simple Router for HTTP and WebSocket Requests — routr-package","title":"routr: A Simple Router for HTTP and WebSocket Requests — routr-package","text":"order make sure web request ends correct handler function router often used. 'routr' package implementing simple powerful routing functionality R based servers. fully functional 'fiery' plugin, can also used 'httpuv' based servers.","code":""},{"path":[]},{"path":"https://routr.data-imaginist.com/reference/routr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"routr: A Simple Router for HTTP and WebSocket Requests — routr-package","text":"Maintainer: Thomas Lin Pedersen thomasp85@gmail.com (ORCID)","code":""},{"path":"https://routr.data-imaginist.com/reference/shared_secret_route.html","id":null,"dir":"Reference","previous_headings":"","what":"Reject requests not in possession of the correct shared secret — shared_secret_route","title":"Reject requests not in possession of the correct shared secret — shared_secret_route","text":"route simple authentication method limits requests based whether possession agreed upon shared secret. aware request send HTTP secret visible anyone intercepting request. reason use route combination HTTPS accept probability secret exposed. shared secret provided request shared secret match 400L Bad Request response returned.","code":""},{"path":"https://routr.data-imaginist.com/reference/shared_secret_route.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reject requests not in possession of the correct shared secret — shared_secret_route","text":"","code":"shared_secret_route(secret, header)"},{"path":"https://routr.data-imaginist.com/reference/shared_secret_route.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reject requests not in possession of the correct shared secret — shared_secret_route","text":"secret secret check request header name header look secret","code":""},{"path":"https://routr.data-imaginist.com/reference/shared_secret_route.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reject requests not in possession of the correct shared secret — shared_secret_route","text":"Route object","code":""},{"path":[]},{"path":"https://routr.data-imaginist.com/reference/sizelimit_route.html","id":null,"dir":"Reference","previous_headings":"","what":"Limit the size of requests — sizelimit_route","title":"Limit the size of requests — sizelimit_route","text":"route meant called prior retrieving request body. inspects Content-Length header determines request allowed proceed. limit can made variable supplying function limit argument returning numeric. Content-Length header missing limit Inf response set 411 - Length Required, header exists exceeds limit response set 413 - Request Entity Large. Otherwise route return TRUE leave response unchanged.","code":""},{"path":"https://routr.data-imaginist.com/reference/sizelimit_route.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Limit the size of requests — sizelimit_route","text":"","code":"sizelimit_route(limit = 5 * 1024^2, method = \"all\", path = \"*\")"},{"path":"https://routr.data-imaginist.com/reference/sizelimit_route.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Limit the size of requests — sizelimit_route","text":"limit Either numeric function returning numeric called request method method route respond . Defaults \"\" path URL path route respond . Defaults \"*\" (path)","code":""},{"path":"https://routr.data-imaginist.com/reference/sizelimit_route.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Limit the size of requests — sizelimit_route","text":"Route object","code":""},{"path":[]},{"path":"https://routr.data-imaginist.com/reference/sizelimit_route.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Limit the size of requests — sizelimit_route","text":"","code":"limit_route <- sizelimit_route() # Default 5Mb limit rook <- fiery::fake_request('http://www.example.com', 'post',                             headers = list(Content_Length = 30*1024^2)) req <- reqres::Request$new(rook) limit_route$dispatch(req) #> [1] FALSE req$respond() #> ── An HTTP response ──────────────────────────────────────────────────────────── #> Status: 413 - Content Too Large #> Content type: text/plain #> → Responding to: http://www.example.com:80/"},{"path":"https://routr.data-imaginist.com/news/index.html","id":"routr-development-version","dir":"Changelog","previous_headings":"","what":"routr (development version)","title":"routr (development version)","text":"can now set cache folder using report_route() can reused instances (#26) Output types reports can now selected name appending name format path (e.g. /report/revealjs). addition current options content negotiation file extension appending (#28) Report parameters can now passed request body using POST request. parameters must formatted JSON (#27) Report caching can now scoped client id (#31) Quarto reports based python now works properly regards extracting output formats parameters (#29) Cached reports can now deleted explicitly sending DELETE request. versions report (regard parameters) deleted. use format-specific path cached versions format deleted (#30) Add support OpenTelemetry otel package (#33)","code":""},{"path":"https://routr.data-imaginist.com/news/index.html","id":"routr-100","dir":"Changelog","previous_headings":"","what":"routr 1.0.0","title":"routr 1.0.0","text":"CRAN release: 2025-08-21 Use native rlang type checking instead assertthat Added ability merge two routes route stacks together routes can now used directly Fiery plugins New tidy api creating routes route stacks Added asset_route() high performance serving static files Fixed bug case keys lower cased provided handler (#16) file system path ressource_route() longer expected absolute (#18) Content-Type header now set correctly serving default file ressource_route() (#19) Added openapi_route() serving API spec based openapi spec file Cleaned condition handling interaction fiery used plug-Added reject_missing_methods argument Route$add_handler() automatically catch requests handler path doesn’t matching method return 405L Added shared_secret_route() creating simple shared secret request rejection Added empty fields Route RouteStack classes Added ignore_trailing_slash argument RouteStack constructor. allows route stack ignore trailing slash request different ways Add redirection functionality RouteStack wilcard matches paths now also provided key argument Support returning promises handlers Added report_route() create route automatically renders serves quarto rmarkdown files","code":""},{"path":"https://routr.data-imaginist.com/news/index.html","id":"routr-041","dir":"Changelog","previous_headings":"","what":"routr 0.4.1","title":"routr 0.4.1","text":"CRAN release: 2022-08-19 General upkeep","code":""},{"path":"https://routr.data-imaginist.com/news/index.html","id":"routr-040","dir":"Changelog","previous_headings":"","what":"routr 0.4.0","title":"routr 0.4.0","text":"CRAN release: 2019-10-03 Add get_handler() method Route (#9, @cpsievert) Add root field Route get appended paths matching incomming request Add remap_handlers() loop handlers reassign based user provided function. (#8) Added pkgdown site https://routr.data-imaginist.com","code":""},{"path":"https://routr.data-imaginist.com/news/index.html","id":"routr-030","dir":"Changelog","previous_headings":"","what":"routr 0.3.0","title":"routr 0.3.0","text":"CRAN release: 2017-10-26 Add on_error() method modify errors handled. default now return 500 without body print error message message(). Modified on_attach() method uses new logging system log route errors.","code":""},{"path":"https://routr.data-imaginist.com/news/index.html","id":"routr-020","dir":"Changelog","previous_headings":"","what":"routr 0.2.0","title":"routr 0.2.0","text":"CRAN release: 2017-08-22 First release Added classes Request, Response, Route, RouteStack","code":""}]
