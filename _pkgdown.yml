destination: docs
url: https://routr.data-imaginist.com

authors:
  Thomas Lin Pedersen:
    href: https://data-imaginist.com

template:
  bootstrap: 5
  bootswatch: simplex

navbar:
  left:
    - icon: fa-home fa-lg
      href: index.html
    - text: Reference
      href: reference/index.html
    - text: News
      menu:
      - text: "Release notes"
      - text: "Version 0.2.0"
        href: https://www.data-imaginist.com/2017/introducing-routr/
      - text: "------------------"
      - text: "Change log"
        href: news/index.html
  right:
    - text: fiery
      href: https://fiery.data-imaginist.com
    - text: reqres
      href: https://reqres.data-imaginist.com
    - icon: fa-github fa-lg
      href: https://github.com/thomasp85/routr

reference:
  - title: "Tidy API"
    desc: >
      While the R6 classes that are the foundation of routr allow you to
      manipulate and work with them directly through their class methods, it is
      often more convenient to use a functional and pipe-friendly interface.
    contents:
      - route
      - route_stack
      - route_add
      - route_merge
  - title: "Base Classes"
    desc: >
      A router based on routr is build up of Route objects combined together
      into a RouteStack object. Requests are passed through each route in a
      RouteStack and subjected to whatever handlers get matched to the URL at
      each step.
    contents:
      - Route
      - RouteStack
      - AssetRoute
  - title: "Route constructors"
    desc: >
      A few predetermined route functionalities have constructors that help you
      create them easily.
    contents:
      - asset_route
      - ressource_route
      - sizelimit_route
      - openapi_route
      - shared_secret_route
